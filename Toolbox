#note: this section of the code is partially written by: https://www.youtube.com/watch?v=StI2R__7DBA

import pandas as pd
alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 

class Keyboard:


    def forward(self, letter):
        signal = alphabet.find(letter)
        return signal

    def backward(self, signal):
        letter = alphabet[signal]
        return letter



class Steckerbrett:


    #takes as input a list of 2 character strings as steckerbrett input
    def __init__(self, pairs):

        self.left = alphabet
        self.right = alphabet

        for pair in pairs:
            
            A = pair[0]
            B = pair[1]

            pos_A = self.left.find(A)
            pos_B = self.left.find(B)

            self.left = self.left[:pos_A]+B+self.left[pos_A+1:]
            self.left = self.left[:pos_B]+A+self.left[pos_B+1:]

    def forward(self, signal):
        letter = self.right[signal]
        signal = self.left.find(letter)
        return signal

    def backward(self, signal):
        letter = self.left[signal]
        signal = self.right.find(letter)
        return signal
    


class Rotor:


    def __init__(self, rotor_setting, notch=None):
        self.left = alphabet
        self.right = rotor_setting
        
        if not notch == None:
            self.notch = notch

    def forward(self, signal, notch_signal= False):
        if notch_signal:
            self.rotate()

        notch_signal = False
        letter = self.right[signal]
        signal = self.left.find(letter)

        if (self.notch==self.left[0]):
            notch_signal = True
        
        return signal, notch_signal

    def backward(self, signal):
        letter = self.left[signal]
        signal = self.right.find(letter)
        return signal

    def rotate(self,shift=1):
        self.left = self.left[shift:]+self.left[0:shift-1]
        self.right = self.right[shift:]+self.right[0:shift-1]

    def rotate_to_letter(self, letter):
        n = alphabet.find(letter.upper())
        self.rotate(n)



class Reflector:


    def __init__(self, reflector):
        self.left = alphabet
        self.right = reflector

    def forward(self, signal):
        letter = self.right[signal]
        signal = self.left.find(letter)
        return signal

