import pandas as pd


class Keyboard:

    def forward(self, letter):
        letter = letter.upper()
        signal = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.find(letter)
        return signal

    def backward(self, signal):
        letter = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[signal]
        return letter



class Steckerbrett:


    #takes as input a list of 2 character strings as steckerbrett input
    def __init__(self, pairs):

        self.left = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 
        self.right = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 

        for pair in pairs:
            
            A = pair[0].upper()
            B = pair[1].upper()

            pos_A = self.left.find(A.upper())
            pos_B = self.left.find(B.upper())

            self.left = self.left[:pos_A]+B+self.left[pos_A+1:]
            self.left = self.left[:pos_B]+A+self.left[pos_B+1:]



    def forward(self, signal):
        letter = self.left[signal]
        signal = self.right.find(letter)
        return signal

    def backward(self, signal):
        letter = self.left[signal]
        signal = self.right.find(letter)
        return signal
    


class Rotor:


    def __init__(self, rotor_setting, notch='0'):
        self.right = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 
        self.left = rotor_setting
        
        if not notch == None:
            self.notch = notch
        else:
            self.notch = '0'

    def forward(self, signal):

        letter = self.right[signal]
        signal = self.left.find(letter)

        notch_signal = self.notch ==self.left[0]
        
        return signal, notch_signal

    def backward(self, signal):
        letter = self.left[signal]
        signal = self.right.find(letter)
        return signal

    def rotate(self):
        self.left = self.left[25:]+self.left[0:25]

    def rotate_to_letter(self, letter):
        n = self.left.find(letter.upper())
        self.left = self.left[n:]+self.left[0:n]



class Reflector:


    def __init__(self, reflector_setting):
        self.right = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 
        self.left = reflector_setting

    def forward(self, signal):
        letter = self.right[signal]
        signal = self.left.find(letter)
        return signal

class Entry_wheel(Rotor):
    def __init__(self):
        rotor_setting ='QWERTYUIOPASDFGHJKLZXCVBNM'
        super().__init__(rotor_setting, notch=None)

    def forward(self, signal):
        return super().forward(signal)
    
    def backward(self, signal):
        return super().backward(signal)
